datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int            @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String         @unique
  password       String
  profilePicture String?
  phoneNumber    String?
  isAdmin        Boolean        @default(false)
  templates      CodeTemplate[]
  blogPosts      BlogPost[]
  comments       Comment[]
  reports        Report[]       @relation("UserReports")
  UserVote       UserVote[]
}

model CodeTemplate {
  id          Int            @id @default(autoincrement())
  title       String
  explanation String
  code        String
  language    String
  createdAt   DateTime       @default(now())
  author      User           @relation(fields: [authorId], references: [id])
  authorId    Int
  forks       CodeTemplate[] @relation("Forks")
  original    CodeTemplate?  @relation("Forks", fields: [originalId], references: [id])
  originalId  Int?
  blogPosts   BlogPost[]
  tags        Tag[]          @relation("CodeTemplateTags")
}

model BlogPost {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  content     String
  createdAt   DateTime       @default(now())
  author      User           @relation(fields: [authorId], references: [id])
  authorId    Int
  templates   CodeTemplate[]
  comments    Comment[]
  reports     Report[]       @relation("BlogPostReports")
  isHidden    Boolean        @default(false)
  tags        Tag[]          @relation("BlogPostTags")
  upvotes     Int            @default(0)
  downvotes   Int            @default(0)
}

model Tag {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  codeTemplates CodeTemplate[] @relation("CodeTemplateTags")
  blogPosts     BlogPost[]     @relation("BlogPostTags")
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  blogPost   BlogPost  @relation(fields: [blogPostId], references: [id])
  blogPostId Int
  parent     Comment?  @relation("Replies", fields: [parentId], references: [id])
  parentId   Int?
  replies    Comment[] @relation("Replies")
  reports    Report[]  @relation("CommentReports")
  isHidden   Boolean   @default(false)
  upvotes    Int       @default(0)
  downvotes  Int       @default(0)
}

model Report {
  id         Int       @id @default(autoincrement())
  reason     String
  createdAt  DateTime  @default(now())
  reporter   User      @relation("UserReports", fields: [reporterId], references: [id])
  reporterId Int
  blogPost   BlogPost? @relation("BlogPostReports", fields: [blogPostId], references: [id])
  blogPostId Int?
  comment    Comment?  @relation("CommentReports", fields: [commentId], references: [id])
  commentId  Int?
}

model UserVote {
  id         Int    @id @default(autoincrement())
  userId     Int
  targetId   Int // ID of the comment or post being voted on
  targetType String // Either 'comment' or 'post'
  voteType   String // Either 'upvote' or 'downvote'

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, targetId, targetType]) // Ensures one vote per user per target
}